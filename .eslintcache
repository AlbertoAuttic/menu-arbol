[{"D:\\Auttic\\MenusDesplegablesReact\\belajar-react-dropdown-nav\\src\\index.js":"1","D:\\Auttic\\MenusDesplegablesReact\\belajar-react-dropdown-nav\\src\\App.js":"2","D:\\Auttic\\MenusDesplegablesReact\\belajar-react-dropdown-nav\\src\\components\\TreeView.js":"3"},{"size":209,"mtime":1652888902030,"results":"4","hashOfConfig":"5"},{"size":331,"mtime":1671096401120,"results":"6","hashOfConfig":"5"},{"size":3088,"mtime":1652970965346,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"4hvtcu",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"10"},"D:\\Auttic\\MenusDesplegablesReact\\belajar-react-dropdown-nav\\src\\index.js",[],["16","17"],"D:\\Auttic\\MenusDesplegablesReact\\belajar-react-dropdown-nav\\src\\App.js",[],"D:\\Auttic\\MenusDesplegablesReact\\belajar-react-dropdown-nav\\src\\components\\TreeView.js",["18","19","20","21","22","23"],"import { Treebeard, decorators } from \"react-treebeard\";\r\nimport React, { useState } from \"react\";\r\nimport Folder from \"../assets/folder2.svg\";\r\nimport \"./TreeView.css\"\r\nimport {theme,animations} from \"react-treebeard\"\r\n\r\n\r\nconst {activeLink,base,header,link,loading,subtree,toggle} = theme.tree.node\r\nactiveLink.background=\"#5a7aaa1a\"\r\n\r\n\r\nanimations.toggle=() => ({})\r\n\r\nconst CustomToggle = () => <img src={Folder} alt=\"Folder\" style={{width:\"20px\",padding:\"4px 10px\"}}/>;\r\n\r\nconst CustomHeader = ({onSelect, style, customStyles, node}) => {\r\n  \r\n  const iconType = node.children ? '' : 'file-text';\r\n  const iconClass = `fa fa-${iconType}`;\r\n  const iconStyle = {marginRight: '5px',fontSize:\"20px\",padding:\"7px 0px\" };\r\n  return(\r\n    <div style={style.base} onClick={onSelect}>\r\n      <div style={node.selected ? {...style.title, ...customStyles.header.title} : style.title}>\r\n          <i className={iconClass} style={iconStyle}/>\r\n          {node.name}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst datos = {\r\n    name: \"Gestión\",\r\n    id: 1,\r\n    toggled: true,\r\n    active: true,\r\n    children: [\r\n        {\r\n            name: \"Colegiados\",\r\n            id: 2,\r\n            children: [\r\n                { name: \"Activos\" },\r\n                { name: \"Inactivos\" },\r\n                { name: \"Todos\" },\r\n                { name: \"Por Áreas\" },\r\n                { name: \"Por modalidades prof\" },\r\n            ],\r\n        },\r\n        {\r\n            name: \"Empresas\",\r\n            id: 3,\r\n            children: [\r\n              { name: \"Activas\" },\r\n              { name: \"Inactivas\" },\r\n              { name: \"Todas\" }\r\n            ],\r\n        },\r\n        {\r\n            name: \"Establecimientos\",\r\n            id: 4,\r\n            children: [\r\n              { name: \"Activas\" },\r\n              { name: \"Inactivas\" },\r\n              { name: \"Establecimientos\" },\r\n              { name: \"Todas\" }\r\n            ],\r\n        },\r\n        {\r\n            name: \"Depósito de Medicamentos\",\r\n            id: 5,\r\n            children: [{ name: \"animations.js\" }, { name: \"default.js\" }],\r\n        },\r\n        {\r\n            name: \"Terceros\",\r\n            id: 6,\r\n            children: [{ name: \"animations.js\" }, { name: \"default.js\" }],\r\n        },\r\n        {\r\n            name: \"Envios Pendientes Consejo\",\r\n            id: 7,\r\n            children: [{ name: \"animations.js\" }, { name: \"default.js\" }],\r\n        },\r\n    ],\r\n   \r\n};\r\n\r\nconst TreeExample = () => {\r\n    const [data, setData] = useState(datos);\r\n    const [cursor, setCursor] = useState(false);\r\n\r\n    const onToggle = (node, toggled) => {\r\n        if (cursor) {\r\n            cursor.active = false;\r\n        }\r\n        node.active = true;\r\n        if (node.children) {\r\n            node.toggled = toggled;\r\n        }\r\n        setCursor(node);\r\n        setData(Object.assign({}, data));\r\n        if(!node.children){\r\n          alert(node.name)\r\n        }\r\n    };\r\n\r\n    decorators.Toggle=CustomToggle\r\n    decorators.Header=CustomHeader\r\n    return <Treebeard data={data} onToggle={onToggle} />;\r\n};\r\n\r\nexport default TreeExample;\r\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":8,"column":19,"nodeType":"30","messageId":"31","endLine":8,"endColumn":23},{"ruleId":"28","severity":1,"message":"32","line":8,"column":24,"nodeType":"30","messageId":"31","endLine":8,"endColumn":30},{"ruleId":"28","severity":1,"message":"33","line":8,"column":31,"nodeType":"30","messageId":"31","endLine":8,"endColumn":35},{"ruleId":"28","severity":1,"message":"34","line":8,"column":36,"nodeType":"30","messageId":"31","endLine":8,"endColumn":43},{"ruleId":"28","severity":1,"message":"35","line":8,"column":44,"nodeType":"30","messageId":"31","endLine":8,"endColumn":51},{"ruleId":"28","severity":1,"message":"36","line":8,"column":52,"nodeType":"30","messageId":"31","endLine":8,"endColumn":58},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'base' is assigned a value but never used.","Identifier","unusedVar","'header' is assigned a value but never used.","'link' is assigned a value but never used.","'loading' is assigned a value but never used.","'subtree' is assigned a value but never used.","'toggle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]